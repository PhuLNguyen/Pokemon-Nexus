services:
  # 1. API Gateway / Reverse Proxy (Entry Point)
  nginx:
    image: nginx:stable-alpine
    container_name: pn-nginx
    restart: always
    ports:
      # Expose Nginx on port 8080 to the host (to avoid port 5000 conflict)
      - "8080:80" 
    volumes:
      # Mount the custom Nginx configuration file
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app-auth
      - app-inventory
      - app-gatcha
      - app-trade
      - app-battle
      
  # --- 2. Microservices (All use the same base image built from Dockerfile) ---

  # Authentication Service (Handles /login, /register, /home)
  app-auth:
    build: . 
    container_name: pn-app-auth
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    # Use Gunicorn to run the auth service file
    command: gunicorn -w 4 --bind 0.0.0.0:5000 web.auth_service:app

  # Inventory Service (Handles /api/inventory/view, /api/inventory/release)
  app-inventory:
    build: . 
    container_name: pn-app-inventory
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    # Use Gunicorn to run the inventory service file
    command: gunicorn -w 4 --bind 0.0.0.0:5000 web.inventory_service:app
  
  # Gatcha Service (Handles /api/gatcha/run)
  app-gatcha:
    build: . 
    container_name: pn-app-gatcha
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    # Use Gunicorn to run the gatcha service file
    command: gunicorn -w 4 --bind 0.0.0.0:5000 web.gatcha_service:app

  # Trade Service (Handles /api/trade/*)
  app-trade:
    build: . 
    container_name: pn-app-trade
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    # Use Gunicorn to run the trade service file
    command: gunicorn -w 4 --bind 0.0.0.0:5000 web.trade_service:app

  # Battle Service (Handles real-time Socket.IO communication)
  app-battle:
    build: . 
    container_name: pn-app-battle
    environment:
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    # FIX: Use Gunicorn with the Eventlet worker for SocketIO
    command: gunicorn -k eventlet -w 1 --bind 0.0.0.0:5001 web.battle_service:app

  # 7. Database (MongoDB)
  mongodb:
    image: mongo:latest
    container_name: pn-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - pn-mongo-volume:/data/db

  # 8. Session/Broker (Redis)
  redis:
    image: redis:latest
    container_name: pn-redis
    restart: always
    volumes:
      - pn-redis-volume:/data

# Define volumes for persistent data storage
volumes:
  pn-mongo-volume:
  pn-redis-volume: