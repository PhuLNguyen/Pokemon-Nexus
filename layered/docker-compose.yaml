services:
  # 1. API Gateway / Load Balancer (Entry Point)
  nginx:
    image: nginx:stable-alpine
    container_name: phu-nginx
    restart: always
    ports:
      # Expose Nginx on port 5000 to the host
      - "5000:80" 
    volumes:
      # Mount the corrected nginx.conf
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app-core
      - app-realtime
      - redis # Redis is often a dependency for the app services
      
  # 2. Application Server (Core Business Logic, Handles /login, /api/inventory, etc.)
  app-core:
    build: . 
    container_name: phu-app-core
    environment:
      - FLASK_APP=app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./web:/app 
    # Use Gunicorn for standard HTTP requests
    command: gunicorn -w 4 -b 0.0.0.0:5000 app:app 

  # 3. Real-Time/Battle Server (Handles WebSockets/SocketIO)
  app-realtime:
    build: . 
    container_name: phu-app-realtime
    environment:
      - FLASK_APP=app.py
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
      - SECRET_KEY=your_strong_and_secret_key_for_flashing
      - SESSION_TYPE=redis
      - SESSION_REDIS=redis://redis:6379/1 
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./web:/app 
    # Eventlet worker with explicit timeout settings
    command: gunicorn -k eventlet -w 1 --bind 0.0.0.0:5001 --timeout 300 --keep-alive 65 --log-level debug app:app

  # 4. Task Queue Broker (Redis)
  redis:
    image: redis:latest
    container_name: phu-redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --bind 0.0.0.0
    volumes:
      - phu-redis-volume:/data

  # 5. Database (MongoDB)
  mongodb:
    image: mongo:latest
    container_name: phu-mongodb
    restart: always
    ports:
      - "27017:27017" 
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - phu-mongo-volume:/data/db

  # 6. Database Seeder (RUNS ONCE)
  db-seeder:
    build: 
      context: .
      dockerfile: Dockerfile.test # Use the test runner Dockerfile, but run the seed script
    container_name: phu-db-seeder
    environment:
      # Pass the connection string for the seeder script
      - MONGO_URI=mongodb://admin:password@mongodb:27017/PokemonNexusDB?authSource=admin
    # Ensure it runs only after MongoDB is ready
    depends_on:
      - mongodb
    volumes:
      # Mount the current directory to access seed_db.py
      - ./:/app 
    # Override the default command to explicitly run the seeding script
    command: python seed_db.py
    # Set to exit after running the script
    restart: "no" 

  # 7. Load Test Runner (Headless mode for data collection)
  load-tester:
    build: 
      context: .
      dockerfile: Dockerfile.test
    container_name: phu-load-tester
    # Host needs to be the name of the Nginx service
    environment:
      - TARGET_HOST=http://nginx
    depends_on:
      # Start the test only after all services are up and the DB is seeded
      - nginx
      - db-seeder
    volumes:
      - ./:/app # Mount to access locustfile.py and save results
      - ./test_results:/mnt/results # Dedicated volume for output
    
    # Locust Master in Headless Mode:
    # -u 200: 200 users (Example)
    # -r 20: 20 users/sec spawn rate (Ramp-up)
    # --run-time 5m: Run for 5 minutes
    # --csv: Output data to CSV files
    # --headless: Run without web UI
    command: locust -f locustfile.py --headless -H http://nginx -u 200 -r 20 --run-time 5m --csv /mnt/results/test_run_1 --skip-log-setup

volumes:
  phu-mongo-volume:
  phu-redis-volume:
  test_results: # volume to store the test CSV output